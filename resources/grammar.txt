program        → declaration* EOF




;;;; 		DECLARATIONS

declaration    → lambdaDecl
               | varDecl
               | statement

lambdaDecl     → "(" lambda ")"
varDecl        → "let" IDENTIFIER ( "=" exprStmt )?




;;;; 		STATEMENTS


statement      → exprStmt
               | ifStmt
               | sendStmt
               | whileStmt
               | block

exprStmt       → assignmentStmt
assignmentStmt → IDENTIFIER "=" assignmentStmt
               | expression
ifStmt         → "if" expression statement ( "else" statement )?
sendStmt       → "(" "send" expression ")"
whileStmt      → "while" "(" expression ")" statement
block          → "{" declaration* "}"




;;;;		EXPRESSIONS


expression     → operation
operation      → ( "(" IDENTIFIER arguments* ")" ( "->" operation )* ) | logical
logical        → ( ( "or" | "and" | "!=" | "==" | ">" | ">=" | "<" | "<=" | "-" | "+" | "/" | "*" | "**" | "%" ) unary )* unary
unary          → ( "!" | "-" ) unary | primary
primary        → "true" | "false" | "nil"
               | INT | DOUBLE | CHAR | STRING | IDENTIFIER




;;;;		UTILITIES


lambda 	   	   → "lambda" IDENTIFIER? ( "|" parameters )? ( "->" (expression | block) )
parameters     → IDENTIFIER ( "," IDENTIFIER )*
arguments      → (expression | lambda) ( "," ( expression | lambda ) )*




;;;;		LITERALS


INT 		   → DIGIT+
DOUBLE         → DIGIT+ ( "." DIGIT+ )?
STRING         → '"' <any char except '"'>* '"'
IDENTIFIER     → ALPHA ( ALPHA | DIGIT )*
ALPHA          → 'a' ... 'z' | 'A' ... 'Z' | '_'
DIGIT          → '0' ... '9'
