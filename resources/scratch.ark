

;; TODO: find a name for this lang

(print "hello world")

(+ (+ 1 2) 3) 	;; long form			;; operation
(+ 1 2 3) 			;; short form
(* 1 2 3) 			;; 1 * 2 * 3
(/ 1 2) 				;; 1/2
(* (+ 1 1) 2)		;; (* 2 2)
(+ (* 1 (/ 2 3)) 3)

(+ 1 1) -> (* 2) ;; 4

(lambda sum | a:int, b:int -> (+ a b)): [int]
(sum 1 2)
(sum 1 2)

(lambda pow | x:int, exp:int -> (** x exp)): [int]
(pow 2 (sum 1 (fetch 1))) ;; -> 4
(* 2 2) -> (sum 1) -> (pow 2 @) ;; 16 (2 ^ 5)

Point {
	x: int ,
	y: int
}

p1 = (Point x:1 y:1)
p2 = (Point x:2 y:2)
(print p.x p.y)

(lambda@Point add | p1: Point, p2: Point {
	p1.x += p2.x
	p1.y += p2.y
	}): Void

(add p1 p2)
(print p1.x p1.y) ;; 3 3
(lambda add | a:int, b:int -> (+ a b)): [int]
(lambda isOdd | a:int {
	send a % 2 != 0
	}): bool

(let a = [1,2,3,4,5])

(x,i:a) -> (print)

(print a)

(lambda filter | c:list, f:lambda[bool] {
	let a = []
	(i:c) {
		if (f i) {
			(add a i)
		}
	}
	send a
	})

a -> (pow 2)							;; [1,4,9,16]
	-> (filter lambda | x -> (< x 5)) 	;; [1,4]
	-> (lambda | x:int -> Point(x, 0))  ;; [Point(1,0), Point(4,0)]

[1,2,3,4]
	-> (pow 2) ;; [1,4,9,16]
	-> (filter lambda | x -> (< x 5)) ;; [1,4]

let a = [1,2,3,4]
(i:a) {
	(print i)
}

a -> (print)

(lambda hello -> (print "hello"))

(and (< 1 2) (> 2 1)) ;; true















